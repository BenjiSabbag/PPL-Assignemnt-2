(define take
  (lambda (lst pos)
    (if (empty? lst) 
      '()
      (if (= pos 0) 
        '()
        (cons (car lst) (take (cdr lst) (- pos 1)))
      )
    )
  )
)

(define take-map
  (lambda (lst func pos)
    (if (empty? lst) 
      '()
      (if (= pos 0) 
        '() 
        (cons (func (car lst)) (take-map (cdr lst) func (- pos 1)))
      )
    )
  )
)

(define take-filter
  (lambda (lst pred pos)
    (if (empty? lst) 
      '()
      (if (= pos 0) 
        '()
        (if (pred (car lst))
          (cons (car lst) (take-filter (cdr lst) pred (- pos 1)))
          (take-filter (cdr lst) pred pos)
        )
      )
    )
  )
)

(define sub-size
  (lambda (lst size)
    (if (< (length lst) size)
      '()
      (if (empty? lst)
        (list '())
        (cons (take lst size) (sub-size (cdr lst) size))
      )
    )
  )
)

(define sub-size-map
  (lambda (lst func size)
    (if (< (length lst) size)
      '()
      (if (empty? lst)
        (list '())
        (cons (take-map lst func size) (sub-size-map (cdr lst) func size))
      )
    )
  )
)

(define root
  (lambda (tree)
    (if (empty? tree)
      '()
      (car tree)
    )
  )
)

(define left
  (lambda (tree)
    (if (empty? tree)
      '()
      (if (empty? (cdr tree))
        '()
        (root (cdr tree))
      )
    )
  )
)

(define right
  (lambda (tree)
    (if (empty? tree)
      '()
      (if (empty? (cdr tree))
        '()
        (root (cdr (cdr tree)))
      )
    )
  )
)

(define count-node
  (lambda (tree val)
    (if (empty? tree)
      0
      (if (pair? tree)
        (if (eq? (root tree) val)
          (+ 1 (count-node (left tree) val) (count-node (right tree) val))
          (+ (count-node (left tree) val) (count-node (right tree) val))
        )
        (if (eq? tree val)
          1
          0
        )
      )
    )
  )
)

(define mirror-tree
  (lambda (tree)
    (if (empty? tree)
      '()
      (if (pair? tree)
        (cons (root tree) (cons (mirror-tree (right tree)) (cons (mirror-tree (left tree)) '())))
        tree
      )
    )
  )
)

(define make-ok
  (lambda (val)
    (cons 'ok val)
  )
)
 
(define make-error
  (lambda (msg)
    (cons 'error msg)
  )
)

(define ok?
  (lambda (res)
    (if (pair? res)
      (if (eq? (car res) 'ok) #t #f)
      #f
    )
  )
)

(define error?
  (lambda (res)
    (if (pair? res)
      (if (eq? (car res) 'error) #t #f)
      #f
    )
  )
)

(define result?
  (lambda (res)
    (if (pair? res)
      (if (or (eq? (car res) 'ok) (eq? (car res) 'error)) #t #f)
      #f
    )
  )
)

(define result->val
  (lambda (res)
    (if (or (ok? res) (error? res))
      (cdr res)
      (make-error "Error: not a result")
    )
  )
)

(define bind 
  (lambda (f)
    (lambda (res)
      (if (error? res)
        res
        (f (cdr res))
      )
    )
  )
)


